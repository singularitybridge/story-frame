/**
 * @license
 * SPDX-License-Identifier: Apache-2.0
 */

/**
 * Story creation types for Quick Path and Custom Path flows
 */

// Genre categories with corresponding character illustrations
export type Genre = 'drama' | 'action' | 'comedy' | 'horror';

// Story structure types
export type StoryType = 'character-journey' | 'situation' | 'discovery';

// Pacing/energy levels
export type Energy = 'fast' | 'medium' | 'contemplative';

/**
 * Quick Path: User selects genre, type, and energy
 * AI generates complete story concept automatically
 */
export interface QuickPathParams {
  genre: Genre;
  type: StoryType;
  energy: Energy;
}

/**
 * Custom Path: User provides creative direction
 * AI generates story based on user input
 */
export interface CustomPathParams {
  concept: string; // Core story idea/theme
  character?: string; // Character description (optional)
  mood?: string; // Emotional tone (optional)
}

/**
 * Generated scene structure
 */
export interface GeneratedScene {
  id: string;
  title: string;
  duration: number; // seconds (default: 8)
  prompt: string; // Visual description for Veo
  cameraAngle: string;
  voiceover: string; // Dialogue in quotes
  generated: boolean;
  settings: {
    model: 'Veo 3.1';
    resolution: '720p' | '1080p';
    isLooping: boolean;
  };
}

/**
 * Metadata about how the story was generated
 */
export interface GenerationMetadata {
  mode: 'quick' | 'custom';
  timestamp: string; // ISO string
  aiPrompt: string; // The prompt sent to Gemini
  originalParams: QuickPathParams | CustomPathParams;
  refinements?: {
    timestamp: string;
    feedback: string;
    aiPrompt: string;
  }[];
}

/**
 * Complete story draft generated by AI
 */
export interface StoryDraft {
  projectMetadata: {
    title: string;
    description: string;
    type: 'short';
    character: string; // Character name/description
    aspectRatio: '9:16'; // Portrait only for generated stories
    defaultModel: 'Veo 3.1';
    defaultResolution: '720p';
  };
  scenes: GeneratedScene[];
  generationMetadata?: GenerationMetadata; // Optional for backward compatibility
}

/**
 * Chat message for refinement conversation
 */
export interface RefinementMessage {
  id: string;
  role: 'user' | 'assistant';
  content: string;
  timestamp: string;
  changesSummary?: string; // AI-generated summary of changes applied
}

/**
 * API request/response types
 */
export interface GenerateStoryRequest {
  mode: 'quick' | 'custom';
  params: QuickPathParams | CustomPathParams;
  refinement?: string; // Optional refinement feedback
  existingStory?: StoryDraft; // Existing story to refine
}

export interface GenerateStoryResponse {
  success: boolean;
  story?: StoryDraft;
  changesSummary?: string; // AI-generated explanation of changes
  error?: string;
}
